# バイトコンパイル / 最適化 / DLLファイル
__pycache__/
*.py[cod]
*$py.class

# C拡張
*.so

# 配布 / パッケージング
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  通常、これらのファイルはテンプレートからPythonスクリプトによって書き込まれ、
#  PyInstallerがexeをビルドする前に日付やその他の情報を注入します。
*.manifest
*.spec

# インストーラーログ
pip-log.txt
pip-delete-this-directory.txt

# 単体テスト / カバレッジレポート
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 翻訳ファイル
*.mo
*.pot

# Django関連:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask関連:
instance/
.webassets-cache

# Scrapy関連:
.scrapy

# Sphinxドキュメント
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   ライブラリやパッケージの場合、複数の環境でコードを実行することを意図しているため、
#   これらのファイルを無視することをお勧めします。それ以外の場合はチェックインしてください:
# .python-version

# pipenv
#   pypa/pipenv#598 によると、Pipfile.lockをバージョン管理に含めることが推奨されています。
#   ただし、コラボレーションの場合、プラットフォーム固有の依存関係やクロスプラットフォーム
#   サポートのない依存関係がある場合、pipenvは動作しない依存関係をインストールしたり、
#   必要な依存関係をすべてインストールしない可能性があります。
#Pipfile.lock

# UV
#   Pipfile.lockと同様に、uv.lockをバージョン管理に含めることが一般的に推奨されています。
#   特にバイナリパッケージの場合、再現性を確保するために推奨されますが、ライブラリでは
#   より一般的に無視されます。
#uv.lock

# poetry
#   Pipfile.lockと同様に、poetry.lockをバージョン管理に含めることが一般的に推奨されています。
#   特にバイナリパッケージの場合、再現性を確保するために推奨されますが、ライブラリでは
#   より一般的に無視されます。
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Pipfile.lockと同様に、pdm.lockをバージョン管理に含めることが一般的に推奨されています。
#pdm.lock
#   pdmはプロジェクト全体の設定を.pdm.tomlに保存しますが、これをバージョン管理に含めないことが
#   推奨されています。
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; 例: github.com/David-OConnor/pyflow や github.com/pdm-project/pdm で使用
__pypackages__/

# Celery関連
celerybeat-schedule
celerybeat.pid

# SageMath解析済みファイル
*.sage.py

# 環境
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyderプロジェクト設定
.spyderproject
.spyproject

# Ropeプロジェクト設定
.ropeproject

# mkdocsドキュメント
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre型チェッカー
.pyre/

# pytype静的型解析ツール
.pytype/

# Cythonデバッグシンボル
cython_debug/

# PyCharm
#  JetBrains固有のテンプレートは、https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  にある別のJetBrains.gitignoreで管理されており、グローバルgitignoreに追加するか、このファイルに
#  マージすることができます。より包括的なオプション（推奨されません）として、以下をコメント解除して
#  ideaフォルダ全体を無視することができます。
.idea/

# PyPI設定ファイル
.pypirc
